#!/bin/bash

. ./.deploy
. ~/.bashrc

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname $SCRIPT)

PARENTDIR=$(dirname $DEPLOYDIR)

if [[ "${DEPLOYDIR}" == "" || "${PARENTDIR}" == "" || "${WORKINGDIR}" == "" || "${RELOADCOMMAND}" == "" ]]; then
  echo "Please write a proper DEPLOYDIR, PARENTDIR, WORKINGDIR, RELOADCOMMAND"
  exit 1
fi

build_dist() {
  [[ "${BUILD_DIST}" != "" ]] && {
    echo "Rsync built if it is fine" >&2
    s=$(cat tmp/build | tail -n 1)
    [[ "$s" == "0" ]] && {
      it=( ${BUILD_DIST})
      for i in "${it[@]}"
      do
        pi=$(dirname $i)
        [[ "${pi}" == "" ]] && echo "$i is wrong" && continue 
        echo "[BUILD_DIST] Deploy $WORKINGDIR/$i to $DEPLOYDIR/$pi"
        rsync -raz --exclude=".git" $RSYNCMORE --delete $WORKINGDIR/$i deploy:$DEPLOYDIR/$pi
      done
    }
  }
}

build_dist
rsync -ravz ./.deploy deploy:/tmp/
# Allow the "deploy" instance to run deploy by a checkout and custom command also
[[ "${REMOTE_DEPLOY}" != "" ]] && {
  echo "Deploying via REMOTE_DEPLOY ${REMOTE_DEPLOY}"
  ssh -t deploy 'bash -c "source /tmp/.deploy; cd '$DEPLOYDIR'; '$REMOTE_DEPLOY'"'
}

build_dist

[[ "${REMOTE_DEPLOY}" == "" ]] && {
  rsync -ravz --rsync-path="sudo rsync" --exclude=".git" $RSYNCMORE --delete $WORKINGDIR deploy:$PARENTDIR/
}

# rsync -ravz --delete . deploy:$DEPLOYDIR/
if [[ "$DEPLOYNOUSENVM" != "" ]]; then
  ssh -t deploy 'bash -c "cd '$DEPLOYDIR' && '$RELOADCOMMAND'"'
else
  ssh -t deploy 'bash -c "export NVM_DIR=\"\$HOME/.nvm\" && \. \"\$NVM_DIR/nvm.sh\" && nvm install '$NODEVERSION' && nvm use '$NODEVERSION' && cd '$DEPLOYDIR' && '$RELOADCOMMAND'"; sudo nginx -t && sudo service nginx reload'
fi
