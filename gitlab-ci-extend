#!/bin/bash -i

SCRIPT=$(readlink -f "$0")
# No sym
# SCRIPT=`realpath -s $0`
SCRIPTPATH=$(dirname $SCRIPT)
WORKINGDIR=$(pwd)

vars_parse--setup() {
  CURDIR=$1
  shift
  DEPLOYDIR=$1
  cd $CURDIR
  instance=$(basename `pwd`)
  INSTANCE=${2:-$instance}
  RELOADCOMMAND=${3:-'pm2 delete \\"'$INSTANCE'\\" || pm2 list; cd '$DEPLOYDIR' && pm2 start npm --name \\"'$INSTANCE'\\" -- start || pm2 list'}
  BUILDSCRIPT=${4:-'npm install;'}
  NODEVERSION=${5:-'10.17.0'}
  DOCKERNODE=${6:-'node:10.17.0-jessie'}
  DIR=$(dirname $0)
}

vars_verify--setup() {
  if [[ "$DEPLOYDIR" == "" || "$INSTANCE" == "" || "$RELOADCOMMAND" == "" || "$BUILDSCRIPT" == "" || "$NODEVERSION" == "" || "$DOCKERNODE" == "" ]]; then
    echo "[Error] $0 [DEPLOYDIR] [INSTANCENAME:curdir] [RELOADCOMMAND: pm2 start] [BUILDCOMMAND: npm install] [NODEVERSION:10.17.0] [NODEDOCKERIMAGE:node:10.17.0-jessie]"
    exit 1
  fi
}

exec--setup() {
  cd $CURDIR
  instance=$(basename `pwd`)
  cp $DIR/.gitlab-ci.yml ./.gitlab-ci.yml
  cp $DIR/.deploy ./
  DEPLOYDIR=$(echo $DEPLOYDIR | sed 's/\//\\\//g')

  RELOADCOMMAND=$(echo $RELOADCOMMAND | sed 's/\//\\\//g' | sed 's/\&/\\\&/g')
  echo "RELOADCOMMAND: $RELOADCOMMAND"

  BUILDSCRIPT=$(echo $BUILDSCRIPT | sed 's/\//\\\//g' | sed 's/\&/\\\&/g')
  echo "BUILDSCRIPT: $BUILDSCRIPT"

  NODEVERSION=$(echo $NODEVERSION | sed 's/\//\\\//g' | sed 's/\&/\\\&/g')
  echo "NODEVERSION: $NODEVERSION"

  DOCKERNODE=$(echo $DOCKERNODE | sed 's/\//\\\//g' | sed 's/\&/\\\&/g')
  echo "DOCKERNODE: $DOCKERNODE"

  sed -i 's/RELOADCOMMANDTOKEN/'"$RELOADCOMMAND"'/g' .gitlab-ci.yml
  sed -i 's/INSTANCETOKEN/'"$INSTANCE"'/g' .gitlab-ci.yml
  sed -i 's/DEPLOYDIRTOKEN/'"$DEPLOYDIR"'/g' .gitlab-ci.yml
  sed -i 's/BUILDSCRIPTTOKEN/'"$BUILDSCRIPT"'/g' .gitlab-ci.yml
  sed -i 's/NODEVERSIONTOKEN/'"$NODEVERSION"'/g' .gitlab-ci.yml
  sed -i 's/DOCKERNODETOKEN/'"$DOCKERNODE"'/g' .gitlab-ci.yml


  sed -i 's/RELOADCOMMANDTOKEN/'"$RELOADCOMMAND"'/g' .deploy
  sed -i 's/INSTANCETOKEN/'"$INSTANCE"'/g' .deploy
  sed -i 's/DEPLOYDIRTOKEN/'"$DEPLOYDIR"'/g' .deploy
  sed -i 's/BUILDSCRIPTTOKEN/'"$BUILDSCRIPT"'/g' .deploy
  sed -i 's/NODEVERSIONTOKEN/'"$NODEVERSION"'/g' .deploy
  sed -i 's/DOCKERNODETOKEN/'"$DOCKERNODE"'/g' .deploy

  echo "Remember to add SSH_PRIVATE_KEY + SSH_HOST_CONFIG (ssh-config options)"
}

exec--main() {
  local cmd=`basename $0`
  declare -F | grep exec-- | sed 's/declare -f exec/'$cmd' /'
}

exec--help() {
  cat $SETUPDIR/README.md
}

exec--docker-import() {
  . .deploy
  docker load < ./build/$IMGINSTANCE.tar
  cat ./build/$INSTANCE.export.tar | sudo docker import - $IMGINSTANCE
  echo "Now run following command to start the docker node"
  echo "docker container run --entrypoint=/bin/bash -p 2995:2998 -d --name $INSTANCE $IMGINSTANCE -c \"cd /usr/app && . .deploy && gitlab-ci-extend --start\""
}

exec--docker-export() {
  . .deploy
  docker image save -o ./build/$IMGINSTANCE.tar $IMGINSTANCE
  docker export $INSTANCE > ./build/$INSTANCE.export.tar
  echo "Image and data is saved to ./build/$IMGINSTANCE.tar AND ./build/$INSTANCE.export.tar"
}

exec--docker-build() {
  echo "[Info] This actions is supposed to run after building all assets well!"
  make -f ./node_modules/gitlab-ci-extend/Makefile dockerfile
}

exec--docker-build-customnode() {
  . .deploy
  local INSTANCENAME="$1"
  local INSTANCEMORE=${2:-" -p 2996:2998"}
  docker stop $INSTANCENAME 2>/dev/null
  docker rm $INSTANCENAME 2>/dev/null
  local cmd="docker container run --entrypoint=/bin/bash $INSTANCEMORE -d --name $INSTANCENAME $IMGINSTANCE -c \"cd /usr/app && . .deploy && gitlab-ci-extend --start\""

}

helpex--build-local() {
  . .deploy
  nvm use $NODEVERSION
  cp ./admin-ui-config/* ./node_modules/admin-ui/
  cd ./node_modules/admin-ui/
  npm install
  ./module.sh --install
  npm run build2
  cd -
}

exec--build-local() {
  export NODE_ENV=development
  helpex--build-local
}

exec--build-prod() {
  export NODE_ENV=production
  helpex--build-local
}

exec--start() {
  . .deploy
  nvm use $NODEVERSION
  cd ./node_modules/admin-ui/
  npm run start2
  cd -
}

exec--setup-ci() {
  ./node_modules/gitlab-ci-extend/setup.sh /etc/antbuddy/tools/provisioning provisioning "echo BuildInstanceCMD" "echo StartInstanceCMD" "12.13" "node:12.13-stretch"
}

. ${SCRIPTPATH}/node_modules/oliver-framework/bash/common.sh
oliver-common-exec --check-existed '$M0 $M1' "$@"
